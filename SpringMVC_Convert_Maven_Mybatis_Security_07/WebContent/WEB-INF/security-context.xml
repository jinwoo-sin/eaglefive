<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/security 
 http://www.springframework.org/schema/security/spring-security.xsd">

	 
	<!-- 1단계 권한 테스트 (in-memory 방식, 자동화된 로그인 인증 폼(auto-config="true")
	<security:http auto-config="true">
	<security:intercept-url pattern="/customer/noticeDetail.htm"
		access="hasRole('ROLE_USER')" /> ROLE_USER 라는 권한을 가진 사용자만 detail페이지 접근 하게 하겠다
	<security:intercept-url pattern="/customer/noticeReg.htm"
		access="hasRole('ROLE_ADMIN')" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kglim" password="1004"
					authorities="ROLE_USER" />
				<security:user name="admin" password="1004"
					authorities="ROLE_USER,ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager> -->

	 <!-- 2단계 테스트 1.login 화면 사용자 제어 2.login.jsp 페이지 자동화(변경) 
	 <security:http>
		<security:csrf disabled="true" />
		<security:form-login login-page="/joinus/login.htm"
			authentication-failure-url="/joinus/login.htm?error" />
		<security:logout logout-success-url="/index.htm" />
		<security:intercept-url pattern="/customer/noticeDetail.htm"
			access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/customer/noticeReg.htm"
			access="hasRole('ROLE_ADMIN')" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kglim" password="1004"
					authorities="ROLE_USER" />
				<security:user name="admin" password="1004"
					authorities="ROLE_USER,ROLE_ADMIN" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager> --> 

	<!-- 3단계 (JDBC) 연동 기본적인 Security 강제하는 Table 구성 (Roll) 구성 -->
	<security:http>
		<security:csrf disabled="true" />
		<security:form-login login-page="/joinus/login.htm"
			authentication-failure-url="/joinus/login.htm?error" />
		<security:logout logout-success-url="/index.htm" />
		<!-- <security:intercept-url pattern="/customer/noticeDetail.htm"
			access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/customer/noticeReg.htm"
			access="hasRole('ROLE_ADMIN')" /> -->
			<security:intercept-url pattern="/customer/*Reg.htm" access="hasRole('ROLE_USER')" />
  			<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
	</security:http>

	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service
				data-source-ref="driverManagerDataSource"
				users-by-username-query="SELECT USERID, pwd AS PASSWORD, 1 enabled FROM member where userid=?"
				authorities-by-username-query="select m.USERID , r.ROLE_NAME from member m join roll r 
										       on m.userid = r.userid where m.userid=?" />
		</security:authentication-provider>
	</security:authentication-manager>
</beans>